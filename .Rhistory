tree.data<-tree.data[which(tree.data$rsq.max>0.75),]#Exclude less than 0.75 rsq
tree<-drop.tip(tree,setdiff(tree$tip.label,tree.data$name))
tree.data<-tree.data[match(tree$tip.label, tree.data$name),]
require(ape)
##read tree
tree<-ape::read.nexus(tree.file)
tree.data<-read.csv(data.file, na.strings = c("?"))
tree.data<-tree.data[which(tree.data$name!="exclude"),]#Exclude duplicates
tree.data<-tree.data[which(tree.data$rsq.max>0.75),]#Exclude less than 0.75 rsq
tree<-drop.tip(tree,setdiff(tree$tip.label,tree.data$name))
tree.data<-tree.data[match(tree$tip.label, tree.data$name),]
new<-strsplit(tree$tip.label, split="_")
genus<-substr(unlist(new), start=1, stop=3)
species<-substr(unlist(new), start=1, stop=1)
gen<-genus[seq(from=1,to=length(genus), by=2)]
spec<-species[seq(from=2,to=length(species), by=2)]
name<-paste0(gen, spec)
tree$tip.label<-name
rownames(tree.data)<-tree$tip.label
#variables
sub<-tree.data[-which(tree.data$group=="salamander"),]
sub$group2<-droplevels(sub$group2)
tree2<-drop.tip(tree, setdiff(tree$tip.label,rownames(sub)))
pgls.data<-sub[,c("regscore.pco.max","Mean.Variance", "group2")]
pgls.data$Mean.Variance<-log(pgls.data$Mean.Variance)
colnames(pgls.data)<-c("xvar", "yvar", "group")
#plot
plot(xvar, yvar, col=c("red", "blue", "green", "orange")[group])
legend(x="topleft", legend=levels(group), col=c("red", "blue", "green","orange"), pch=1, cex=0.5)
#plot 2 gr
plot(xvar, yvar, col=c("red", "blue", "green", "black")[group], pch=19, xlab="Regionalization score", ylab="Log Variance")
legend(x="topleft", legend=levels(group),bty="n", col=c("red", "blue", "green", "black"), pch=19, cex=0.5)
install.packages("viridis")
library(ape)
library(phytools)
library(picante)
library(geiger)
library(bayou)
library(OUwie)
library(viridis)
##read tree
tree<-ape::read.nexus(tree.file)
#read data
tree.data<-read.csv(data.file, na.strings = c("?"))
tree.data<-tree.data[which(tree.data$name!="exclude"),]#Exclude duplicates
tree.data<-tree.data[which(tree.data$rsq.max>0.75),]#Exclude less than 0.75 rsq
tree<-drop.tip(tree,setdiff(tree$tip.label,tree.data$name))
tree.data<-tree.data[match(tree$tip.label, tree.data$name),]
##make abbreviated names names
new<-strsplit(tree$tip.label, split="_")
genus<-substr(unlist(new), start=1, stop=3)
species<-substr(unlist(new), start=1, stop=1)
gen<-genus[seq(from=1,to=length(genus), by=2)]
spec<-species[seq(from=2,to=length(species), by=2)]
name<-paste0(gen, spec)
tree$tip.label<-name
rownames(tree.data)<-tree$tip.label
test<-data.frame(tree$tip.label,tree.data$specimen)
##Make cont map
dev.off()
map.data<-tree.data$Mean.Variance
#transform and linearize for cont map
map.data<-log(map.data)#if need to log
#map.data[which(map.data<3)]<-3 #Set minimum to 3
#map.data[which(map.data>5)]<-5 #Set maximum to 5
names(map.data)<-tree$tip.label
## create a split plot
layout(matrix(c(1,2),1,2),c(1,0.2))
## plot tree
xx<-contMap(tree,map.data,mar=c(4.1,1.1,1.1,0),res=200,plot=FALSE, method="anc.ML")
xx<-phytools::setMap(xx, invert=T)
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
axisPhylo(side=1)
## add dotchart
nTips = length(tree$tip)
ord = tree$edge[,2]
ord = ord[ord <= nTips]
my.palette<-c("black","black","black", "black", "black")#can add colors
colgr<-my.palette[tree.data$group]
symb<-c(16, 21, 8, 17)[tree.data$group]#set symbols
par(mar=c(5,0,2,1.1))
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
#tree$tip.label<-name
tree$tip.label<-c(1:length(tree$tip.label))
rownames(tree.data)<-tree$tip.label
test<-data.frame(tree$tip.label,tree.data$specimen)
##Make cont map
dev.off()
map.data<-tree.data$Mean.Variance
#transform and linearize for cont map
map.data<-log(map.data)#if need to log
#map.data[which(map.data<3)]<-3 #Set minimum to 3
#map.data[which(map.data>5)]<-5 #Set maximum to 5
names(map.data)<-tree$tip.label
## create a split plot
layout(matrix(c(1,2),1,2),c(1,0.2))
## plot tree
xx<-contMap(tree,map.data,mar=c(4.1,1.1,1.1,0),res=200,plot=FALSE, method="anc.ML")
xx<-phytools::setMap(xx, invert=T)
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
axisPhylo(side=1)
## add dotchart
nTips = length(tree$tip)
ord = tree$edge[,2]
ord = ord[ord <= nTips]
my.palette<-c("black","black","black", "black", "black")#can add colors
colgr<-my.palette[tree.data$group]
symb<-c(16, 21, 8, 17)[tree.data$group]#set symbols
par(mar=c(5,0,2,1.1))
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
## plot tree
xx<-contMap(tree,map.data,mar=c(4.1,1.1,1.1,0),res=200,plot=FALSE, method="anc.ML")
xx<-phytools::setMap(xx, invert=T)
n<-length(xx$cols)
xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
axisPhylo(side=1)
## add dotchart
nTips = length(tree$tip)
ord = tree$edge[,2]
ord = ord[ord <= nTips]
my.palette<-c("black","black","black", "black", "black")#can add colors
colgr<-my.palette[tree.data$group]
symb<-c(16, 21, 8, 17)[tree.data$group]#set symbols
par(mar=c(5,0,2,1.1))
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
viridis(n)
## plot tree
xx<-contMap(tree,map.data,mar=c(4.1,1.1,1.1,0),res=200,plot=FALSE, method="anc.ML")
xx<-phytools::setMap(xx, invert=T)
n<-length(xx$cols)
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n)
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n, option="A")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n, option="B")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n, option="C")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n, option="E")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
#tree$tip.label<-name
tree$tip.label<-c(1:length(tree$tip.label))[ord <= nTips]
rownames(tree.data)<-tree$tip.label
test<-data.frame(tree$tip.label,tree.data$specimen)
map.data<-tree.data$Mean.Variance
#transform and linearize for cont map
map.data<-log(map.data)#if need to log
#map.data[which(map.data<3)]<-3 #Set minimum to 3
#map.data[which(map.data>5)]<-5 #Set maximum to 5
names(map.data)<-tree$tip.label
## create a split plot
layout(matrix(c(1,2),1,2),c(1,0.2))
## plot tree
xx<-contMap(tree,map.data,mar=c(4.1,1.1,1.1,0),res=200,plot=FALSE, method="anc.ML")
xx<-phytools::setMap(xx, invert=T)
n<-length(xx$cols)
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n, option="E")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
ord
c(1:length(tree$tip.label))
c(1:length(tree$tip.label))[ord <= nTips]
#tree$tip.label<-name
tree$tip.label<-c(ord <= nTips)
rownames(tree.data)<-tree$tip.label
test<-data.frame(tree$tip.label,tree.data$specimen)
ord
tree$edge[,2]
tree$edge[c(ord <= nTips),2]
tree$edge[c(tree$edge[,2] <= nTips),2]
#tree$tip.label<-name
tree$tip.label<-tree$edge[c(tree$edge[,2] <= nTips),2]
rownames(tree.data)<-tree$tip.label
test<-data.frame(tree$tip.label,tree.data$specimen)
##Make cont map
dev.off()
map.data<-tree.data$Mean.Variance
#transform and linearize for cont map
map.data<-log(map.data)#if need to log
#map.data[which(map.data<3)]<-3 #Set minimum to 3
#map.data[which(map.data>5)]<-5 #Set maximum to 5
names(map.data)<-tree$tip.label
## create a split plot
layout(matrix(c(1,2),1,2),c(1,0.2))
## plot tree
xx<-contMap(tree,map.data,mar=c(4.1,1.1,1.1,0),res=200,plot=FALSE, method="anc.ML")
xx<-phytools::setMap(xx, invert=T)
n<-length(xx$cols)
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n, option="E")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
tree$edge[,2] <= nTips
tree$edge[c(tree$edge[,2] <= nTips),2]
##read tree
tree<-ape::read.nexus(tree.file)
tree$tip.label
tree$edge[,2]
tree$edge[c(tree$edge[,2] <= nTips),2]
c(1:length(tree$tip.label))[c(tree$edge[,2] <= nTips)]
tree$edge[,2]
c(tree$edge[,2] <= nTips)
##read tree
tree<-ape::read.nexus(tree.file)
#read data
tree.data<-read.csv(data.file, na.strings = c("?"))
tree.data<-tree.data[which(tree.data$name!="exclude"),]#Exclude duplicates
tree.data<-tree.data[which(tree.data$rsq.max>0.75),]#Exclude less than 0.75 rsq
tree<-drop.tip(tree,setdiff(tree$tip.label,tree.data$name))
tree.data<-tree.data[match(tree$tip.label, tree.data$name),]
##make abbreviated names names
new<-strsplit(tree$tip.label, split="_")
genus<-substr(unlist(new), start=1, stop=3)
species<-substr(unlist(new), start=1, stop=1)
gen<-genus[seq(from=1,to=length(genus), by=2)]
spec<-species[seq(from=2,to=length(species), by=2)]
##make abbreviated names names
new<-strsplit(tree$tip.label, split="_")
genus<-substr(unlist(new), start=1, stop=3)
species<-substr(unlist(new), start=1, stop=1)
gen<-genus[seq(from=1,to=length(genus), by=2)]
spec<-species[seq(from=2,to=length(species), by=2)]
name<-paste0(gen, spec)
tree$tip.label<-name
rownames(tree.data)<-tree$tip.label
test<-data.frame(tree$tip.label,tree.data$specimen)
##Make cont map
dev.off()
map.data<-tree.data$Mean.Variance
#transform and linearize for cont map
map.data<-log(map.data)#if need to log
#map.data[which(map.data<3)]<-3 #Set minimum to 3
#map.data[which(map.data>5)]<-5 #Set maximum to 5
names(map.data)<-tree$tip.label
## create a split plot
layout(matrix(c(1,2),1,2),c(1,0.2))
## plot tree
xx<-contMap(tree,map.data,mar=c(4.1,1.1,1.1,0),res=200,plot=FALSE, method="anc.ML")
xx<-phytools::setMap(xx, invert=T)
n<-length(xx$cols)
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n)#, option="E")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
dotchart(map.data[ord],labels="",
ylim=c(1,length(tree$tip.label))-0.5, bg="grey",color=colgr[ord], pch=symb[ord])
## plot tree
xx<-contMap(tree,map.data,mar=c(4.1,1.1,1.1,0),res=200,plot=FALSE, method="anc.ML")
xx<-phytools::setMap(xx, invert=T)
n<-length(xx$cols)
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
#xx$cols[1:n]<-viridis(n)#, option="E")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n)#, option="A")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
#xx$cols[1:n]<-colorRampPalette(c("blue","red"), space="Lab")(n)
xx$cols[1:n]<-viridis(n, option="A")
plot(xx,legend=F,mar=c(4,1.1,1.1,0), direction="leftwards", tip.label=F)
require(geomorph)
data(plethodon)
Y.gpa<-gpagen(plethodon$land)    #GPA-alignment
shape<-two.d.array(Y.gpa$coords)
rot<-prcomp(shape,scale=T)$x
Y1 <- shape[,1:10]
Y1.rot<-rot[,1:10]
Y2 <- shape[,-(1:10)]
Y2.rot<-rot[,-(1:10)]
integration.test(Y1, Y2, iter=999)
integration.test(Y1.rot, Y2.rot, iter=999)
shape
rot
Y1.rot
### Example code
data(plethodon)
Y.gpa<-gpagen(plethodon$land)    #GPA-alignment
shape<-two.d.array(Y.gpa$coords)
Y1 <- shape[,1:10]
Y1.rot<-prcomp(Y1)$x
Y2 <- shape[,-(1:10)]
integration.test(Y1, Y2, iter=999)
integration.test(Y1.rot, Y2, iter=999)
Y1
dim(shape)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(regions)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
data("musm")
data("alligator")
Xvar<-alligator[,1]
nvert<-length(Xvar)
data<-scale(data)
pco.gower<-svdPCO(data, "gower")#PCO using svd
PCOscores<-pco.gower$scores[,1:ncol(pco.gower$scores)]
noregions<-2 #Set the maximum number of regions which will be calculated
regiondata<-compileregions(Xvar,PCOscores[,1:5],noregions)
models<-modelselect(regiondata,noregions,2)
support<-model_support(models,nvert, 2)
Xvar
PCOscores[,1:5]
dim(Xvar)
length(Xvar)
dim(PCOscores[,1:5])
alligator
Xvar<-alligator[,1]
nvert<-length(Xvar)
data<-scale(data)
data("alligator")
Xvar<-alligator[,1]
nvert<-length(Xvar)
data<-alligator[,2:ncol(alligator)]
data<-scale(data)
pco.gower<-svdPCO(data, "gower")#PCO using svd
PCOscores<-pco.gower$scores[,1:ncol(pco.gower$scores)]
noregions<-2 #Set the maximum number of regions which will be calculated
regiondata<-compileregions(Xvar,PCOscores[,1:5],noregions)
models<-modelselect(regiondata,noregions,2)
support<-model_support(models,nvert, 2)
support
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(regions)
library(regions)
devtools::build()
library(regions)
##read tree
tree<-ape::read.nexus(tree.file)
#read data
tree.data<-read.csv(data.file, na.strings = c("?"))
tree.data<-tree.data[which(tree.data$name!="exclude"),]#Exclude duplicates
tree.data<-tree.data[which(tree.data$rsq.max>0.75),]#Exclude less than 0.75 rsq
tree<-drop.tip(tree,setdiff(tree$tip.label,tree.data$name))
tree.data<-tree.data[match(tree$tip.label, tree.data$name),]
require(regions)#regions package: Download from github
library(ape)
library(phytools)
library(geiger)
library(bayou)
tree<-ape::read.nexus(tree.file)
#plot(tree)
#read data
tree.data<-read.csv(data.file, na.strings = c("?"))
tree.data<-tree.data[which(tree.data$name!="exclude"),]#Exclude duplicates
tree.data<-tree.data[which(tree.data$rsq.max>0.75),]#Exclude less than 0.75 rsq
tree<-drop.tip(tree,setdiff(tree$tip.label,tree.data$name))
tree.data<-tree.data[match(tree$tip.label, tree.data$name),]
##make abbreviated names names
new<-strsplit(tree$tip.label, split="_")
genus<-substr(unlist(new), start=1, stop=3)
species<-substr(unlist(new), start=1, stop=1)
gen<-genus[seq(from=1,to=length(genus), by=2)]
spec<-species[seq(from=2,to=length(species), by=2)]
name<-paste0(gen, spec)
tree$tip.label<-name
rownames(tree.data)<-tree$tip.label
#Extract just synapsids
split.tree<-splitTree(tree, split=list(node=66, bp=0))
syn.tree<-split.tree[[2]]
plot(syn.tree)
#B. Surface method
syn.tree<-nameNodes(syn.tree)
require(surface)
#B. Surface method
syn.tree<-nameNodes(syn.tree)
dat<-as.data.frame(dat)
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 2, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 5, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = F, sample_threshold = 5, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = F, sample_threshold = 5)#, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = F, sample_threshold = 10)#, max_steps = 3)
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10)#, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
dat
dat<-log(tree.data[match(syn.tree$tip.label,rownames(tree.data)),"Mean.Variance"])
#dat<-tree.data[match(syn.tree$tip.label,rownames(tree.data)),"regscore.pco.max"]
names(dat)<-syn.tree$tip.label
dat<-as.data.frame(dat)
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10)#, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10, max_steps = 3, only_best = T)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.3, aic_threshold = 1)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.3, aic_threshold = 0)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.3, aic_threshold = 2)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.3, aic_threshold = 0, max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.3, aic_threshold = 0, max_steps = 4)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.3,  max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.5,  max_steps = 4)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.1,  max_steps = 4)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10,exclude=0.1,  max_steps = 3)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
test<-runSurface(syn.tree,dat,verbose=F, sample_shifts = T, sample_threshold = 10)
bsum<-surfaceSummary(test$bwd)
kk<-length(test$bwd)
surfaceTreePlot(syn.tree, cex=0.5,test$bwd[[kk]], labelshifts = T, convcol = F)#Best surface model
require(regions)#regions package: Download from github
library(ape)
library(phytools)
library(geiger)
library(bayou)
require(surface)
