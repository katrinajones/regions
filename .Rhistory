scale=NULL
i=1
data<-as.matrix(read.csv(paste0(dir.data,"\\",filelist.data[i]),na.strings=c("?","NA","      NA","     NA","        NA"))) #read csv, each element separated by a comma
if (fill==TRUE){
data<-Missingval(data)#fill missing data
}
require(regopms)
require(regions)
data<-as.matrix(read.csv(paste0(dir.data,"\\",filelist.data[i]),na.strings=c("?","NA","      NA","     NA","        NA"))) #read csv, each element separated by a comma
if (fill==TRUE){
data<-Missingval(data)#fill missing data
}
data[data==0]<-NA #0.001 #Recode zeros to NA, zeros cause weird scaling
new.data<-data.frame(matrix(ncol=ncol(alldata),nrow=nrow(data)))
colnames(new.data)<-colnames(alldata)
measures.sub<-na.omit(colnames(data)[match(measures,colnames(data))])
anglenames.sub<-na.omit(colnames(data)[match(anglenames,colnames(data))])
new.data[,"vert"]<-data[,1]
new.data[,anglenames.sub]<-data[,anglenames.sub]
new.data[,"specimen"]<-rep(names.data[i],nrow(data))
lin.data<-data[,measures.sub]
lin.data
scalefact=exp(mean(log(data.frame(lin.data)$CL),na.rm=T))#scale by geo mean of CL
scalefact
data.frame(lin.data)$CL
log(data.frame(lin.data)$CL)
scalefact=exp(mean(log(data.frame(lin.data)$CL),na.rm=T))#scale by geo mean of CL
scalefact
install.packages("EnvStats")
EnvStats::geoMean(data.frame(lin.data)$CL,na.rm=T)
scalefact
scalefact=exp(mean(log(data.frame(new.data)$CL),na.rm=T))#scale by geo mean of CL
scalefact
ecomorph
as.matrix(X)
ecomorph
syn.tree<-drop.tip(tree,rownames(tree.data)[which(tree.data$group3=="sauropsid")])
X<-tree.data[-which(tree.data$group3=="sauropsid"),]
ecomorph<-as.matrix(X)[,"group3"]
svl<-as.matrix(X)[,"X6regscore.pco.5"]
data<-data.frame(Genus_species=rownames(X),Reg=ecomorph,X=as.numeric(svl))
tree2<-make.simmap(syn.tree,ecomorph)
tree.data$group3
plotSimmap(tree2,type="fan",fsize=0.8,ftype="i")
tree2$node.label<-getStates(tree2,"nodes")
fitOUm<-OUwie(tree2,data,model="OUMV",simmap.tree=F)
require(OUwie)
fitOUm<-OUwie(tree2,data,model="OUMV",simmap.tree=F)
fitOUm
tree.file
order.file
data.file
pcfits(regiondata)
devtools::load_all(".")
library("regions", lib.loc="C:/Program Files/R/R-3.1.2/library")
getOptions("repos")
getOption("repos")
devtools::install_github("rstudio/rmarkdown")
install.package("rmarkdown")
install.package("rmarkdown")
install.packages("rmarkdown")
data
data<-as.matrix(read.csv( paste(dir.data,"\\",filelist.data[i],sep=""),na.strings=c("?","NA")))
data
prcomp(data[,2:ncol(data)])
dir.data
filelist.data<-list.files(dir.data,pattern=".csv")#gets names of files with txt
names.data<-gsub(".csv","",filelist.data)
dir.pcos=paste(dir.data,"\\","plots_5_max",substr(date(),1,10),sep="")
dir.create(dir.pcos)
dir.regmod
filelist.reg<-list.files(dir.regmod,pattern=".csv")#gets names of files with txt
names.reg<-gsub("_regionmodels.csv","",filelist.reg)
dir.fig=paste(dir.data, "\\plots_6_max",substr(date(),1,10),sep="")
dir.create(dir.fig)
method<-"max"
fill=TRUE
for(i in 1:length(filelist.reg)){
noregions<-6 #set max number of regions
#collect data and calc sig pcos
data<-as.matrix(read.csv(paste0(dir.data,"\\",names.reg[i],".csv"),na.strings=c("?","NA","      NA","     NA","        NA")))
Xvar<-data[,1] #first column is X variable
data<-data[,2:ncol(data)] #rest are dependent variables
if (fill==TRUE){
data<-Missingval(data)#fill missing data
}
data<-scale(data)#optional normalization step normalization step for bootstrapping so the variances are the same
nvert<-length(Xvar)
#collect RSS from region models
regiondata<-as.matrix(read.csv(paste(dir.regmod,"\\",filelist.reg[i],sep=""))) #read csv, each element separated by a comma
#Calculate no pcos
pco.gower<-svdPCO(data, "gower") #PCO according to Dave Polly method
if (method=="pco.5"){
pco.5<-length(which(pco.gower$eigen.val/sum(pco.gower$eigen.val)>0.05))#more than 5% of variance
}
if (method=="pco.boot"){
pco.boot<-PCOcutoff(data,1000, "gower")$sigpco
}
if (method=="pco.max"){
pco.max<-PCOmax(regiondata, noregions, nvert)$pco.max
}
if (method=="pc5"){
pc5<-5
}
nopcos<-get(noquote(method))
models<-modelselect(regiondata,noregions,nopcos)
support<-model_support(models,nvert, nopcos)
#Plot and save graphs
pdf(file=paste(dir.fig,"/",names.reg[i],"_figs.pdf", sep = ""))
plotsegreg(Xvar,pcono=1, data=pco.gower$scores, regiondata=support$Model_support)
load1<-pco.load(data,pco.gower$scores[,1])
load1<-round(load1, digits=2)
plotrix::addtable2plot(x=1, y=max(pco.gower$scores[,1]),
display.rownames = T,display.colnames=F,
cex=1,
table=data.frame(load1[1:5,1]))
plotsegreg(Xvar,pcono=2, data=pco.gower$scores, regiondata=support$Model_support)
load2<-pco.load(data,pco.gower$scores[,2])
load2<-round(load2, digits=2)
plotrix::addtable2plot(x=1, y=max(pco.gower$scores[,2]),
display.rownames = T,display.colnames=F,
cex=1,
table=data.frame(load2[1:5,1]))
plotsegreg(Xvar,pcono=3, data=pco.gower$scores, regiondata=support$Model_support)
load3<-pco.load(data,pco.gower$scores[,3])
load3<-round(load3, digits=2)
plotrix::addtable2plot(x=1, y=max(pco.gower$scores[,3]),
display.rownames = T,display.colnames=F,
cex=1,
table=data.frame(load3[1:5,1]))
gplots::textplot(support$Model_support[1:noregions,1:6], cex=0.5)
axesplot(pco.gower$scores, 1, 2, Xvar)
regions::plot.pco.reg(pco.gower$eigen.val,nvert, names.reg[i], regiondata, noregions)
plot<-regionmodel(name=names.reg[i], Xvar=Xvar, regiondata=support$Model_support)
print(plot)
dev.off()
#regionplot alone
tiff(file=paste(dir.fig,"/",names.reg[i],"_figs.tiff", sep = ""), width=1024, height=400)
plot<-regionmodel(name=names.reg[i], Xvar=Xvar, regiondata=support$Model_support)
print(plot)
dev.off()
print(i)
}
require(regions)
fill=TRUE
for(i in 1:length(filelist.reg)){
noregions<-6 #set max number of regions
#collect data and calc sig pcos
data<-as.matrix(read.csv(paste0(dir.data,"\\",names.reg[i],".csv"),na.strings=c("?","NA","      NA","     NA","        NA")))
Xvar<-data[,1] #first column is X variable
data<-data[,2:ncol(data)] #rest are dependent variables
if (fill==TRUE){
data<-Missingval(data)#fill missing data
}
data<-scale(data)#optional normalization step normalization step for bootstrapping so the variances are the same
nvert<-length(Xvar)
#collect RSS from region models
regiondata<-as.matrix(read.csv(paste(dir.regmod,"\\",filelist.reg[i],sep=""))) #read csv, each element separated by a comma
#Calculate no pcos
pco.gower<-svdPCO(data, "gower") #PCO according to Dave Polly method
if (method=="pco.5"){
pco.5<-length(which(pco.gower$eigen.val/sum(pco.gower$eigen.val)>0.05))#more than 5% of variance
}
if (method=="pco.boot"){
pco.boot<-PCOcutoff(data,1000, "gower")$sigpco
}
if (method=="pco.max"){
pco.max<-PCOmax(regiondata, noregions, nvert)$pco.max
}
if (method=="pc5"){
pc5<-5
}
nopcos<-get(noquote(method))
models<-modelselect(regiondata,noregions,nopcos)
support<-model_support(models,nvert, nopcos)
#Plot and save graphs
pdf(file=paste(dir.fig,"/",names.reg[i],"_figs.pdf", sep = ""))
plotsegreg(Xvar,pcono=1, data=pco.gower$scores, regiondata=support$Model_support)
load1<-pco.load(data,pco.gower$scores[,1])
load1<-round(load1, digits=2)
plotrix::addtable2plot(x=1, y=max(pco.gower$scores[,1]),
display.rownames = T,display.colnames=F,
cex=1,
table=data.frame(load1[1:5,1]))
plotsegreg(Xvar,pcono=2, data=pco.gower$scores, regiondata=support$Model_support)
load2<-pco.load(data,pco.gower$scores[,2])
load2<-round(load2, digits=2)
plotrix::addtable2plot(x=1, y=max(pco.gower$scores[,2]),
display.rownames = T,display.colnames=F,
cex=1,
table=data.frame(load2[1:5,1]))
plotsegreg(Xvar,pcono=3, data=pco.gower$scores, regiondata=support$Model_support)
load3<-pco.load(data,pco.gower$scores[,3])
load3<-round(load3, digits=2)
plotrix::addtable2plot(x=1, y=max(pco.gower$scores[,3]),
display.rownames = T,display.colnames=F,
cex=1,
table=data.frame(load3[1:5,1]))
gplots::textplot(support$Model_support[1:noregions,1:6], cex=0.5)
axesplot(pco.gower$scores, 1, 2, Xvar)
regions::plot.pco.reg(pco.gower$eigen.val,nvert, names.reg[i], regiondata, noregions)
plot<-regionmodel(name=names.reg[i], Xvar=Xvar, regiondata=support$Model_support)
print(plot)
dev.off()
#regionplot alone
tiff(file=paste(dir.fig,"/",names.reg[i],"_figs.tiff", sep = ""), width=1024, height=400)
plot<-regionmodel(name=names.reg[i], Xvar=Xvar, regiondata=support$Model_support)
print(plot)
dev.off()
print(i)
}
i=1
noregions<-6 #set max number of regions
data<-as.matrix(read.csv(paste0(dir.data,"\\",names.reg[i],".csv"),na.strings=c("?","NA","      NA","     NA","        NA")))
Xvar<-data[,1] #first column is X variable
data<-data[,2:ncol(data)] #rest are dependent variables
if (fill==TRUE){
data<-Missingval(data)#fill missing data
}
data<-scale(data)#optional normalization step normalization step for bootstrapping so the variances are the same
nvert<-length(Xvar)
regiondata<-as.matrix(read.csv(paste(dir.regmod,"\\",filelist.reg[i],sep=""))) #read csv, each element separated by a comma
pco.gower<-svdPCO(data, "gower") #PCO according to Dave Polly method
if (method=="pco.5"){
pco.5<-length(which(pco.gower$eigen.val/sum(pco.gower$eigen.val)>0.05))#more than 5% of variance
}
if (method=="pco.boot"){
pco.boot<-PCOcutoff(data,1000, "gower")$sigpco
}
if (method=="pco.max"){
pco.max<-PCOmax(regiondata, noregions, nvert)$pco.max
}
if (method=="pc5"){
pc5<-5
}
method<-"pco.max"
fill=TRUE
for(i in 1:length(filelist.reg)){
noregions<-6 #set max number of regions
#collect data and calc sig pcos
data<-as.matrix(read.csv(paste0(dir.data,"\\",names.reg[i],".csv"),na.strings=c("?","NA","      NA","     NA","        NA")))
Xvar<-data[,1] #first column is X variable
data<-data[,2:ncol(data)] #rest are dependent variables
data<-data[,2:ncol(data)] #rest are dependent variables
if (fill==TRUE){
data<-Missingval(data)#fill missing data
}
data<-scale(data)#optional normalization step normalization step for bootstrapping so the variances are the same
nvert<-length(Xvar)
#collect RSS from region models
regiondata<-as.matrix(read.csv(paste(dir.regmod,"\\",filelist.reg[i],sep=""))) #read csv, each element separated by a comma
#Calculate no pcos
pco.gower<-svdPCO(data, "gower") #PCO according to Dave Polly method
if (method=="pco.5"){
pco.5<-length(which(pco.gower$eigen.val/sum(pco.gower$eigen.val)>0.05))#more than 5% of variance
}
if (method=="pco.boot"){
pco.boot<-PCOcutoff(data,1000, "gower")$sigpco
}
if (method=="pco.max"){
pco.max<-PCOmax(regiondata, noregions, nvert)$pco.max
}
if (method=="pc5"){
pc5<-5
}
nopcos<-get(noquote(method))
models<-modelselect(regiondata,noregions,nopcos)
support<-model_support(models,nvert, nopcos)
#Plot and save graphs
tiff(file=paste(dir.fig,"/",names.reg[i],"_figs.tiff", sep = ""), width=1024, height=400)
plot<-regionmodel(name=names.reg[i], Xvar=Xvar, regiondata=support$Model_support)
print(plot)
dev.off()
print(i)
}
install.packages(rprojroot)
install.packages("rprojroot")
version
version
install.packages(c("abind", "acepack", "ade4", "AICcmodavg", "animation", "ape", "assertthat", "BH", "car", "chron", "clue", "coda", "coin", "colorspace", "corpcor", "crayon", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "doParallel", "dplyr", "effects", "EnvStats", "expm", "fastICA", "fastmatch", "fitdistrplus", "formatR", "Formula", "gdata", "geomorph", "ggplot2", "git2r", "gridExtra", "gtools", "haven", "highr", "Hmisc", "htmltools", "htmlwidgets", "httr", "igraph", "installr", "irlba", "jsonlite", "lazyeval", "lme4", "maps", "markdown", "memoise", "mgcv", "mime", "mnormt", "msm", "multcomp", "MuMIn", "mvtnorm", "numDeriv", "openssl", "ouch", "OUwie", "pander", "pbkrtest", "permute", "phangorn", "phytools", "plotrix", "plyr", "proto", "proxy", "psych", "quantreg", "R.matlab", "R.oo", "R.utils", "R6", "RANN", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rJava", "rms", "roxygen2", "rstudioapi", "sandwich", "scales", "scatterplot3d", "segmented", "sjmisc", "sjPlot", "sp", "SparseM", "StatMatch", "stringdist", "stringi", "subplex", "survey", "TH.data", "tidyr", "unmarked", "vegan", "VGAM", "withr", "XML", "yaml", "zoo"))
install.packages(c("abind", "acepack", "ade4", "AICcmodavg", "animation", "ape", "assertthat", "BH", "car", "chron", "clue", "coda", "coin", "colorspace", "corpcor", "crayon", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "doParallel", "dplyr", "effects", "EnvStats", "expm", "fastICA", "fastmatch", "fitdistrplus", "formatR", "Formula", "gdata", "geomorph", "ggplot2", "git2r", "gridExtra", "gtools", "haven", "highr", "Hmisc", "htmltools", "htmlwidgets", "httr", "igraph", "installr", "irlba", "jsonlite", "lazyeval", "lme4", "maps", "markdown", "memoise", "mgcv", "mime", "mnormt", "msm", "multcomp", "MuMIn", "mvtnorm", "numDeriv", "openssl", "ouch", "OUwie", "pander", "pbkrtest", "permute", "phangorn", "phytools", "plotrix", "plyr", "proto", "proxy", "psych", "quantreg", "R.matlab", "R.oo", "R.utils", "R6", "RANN", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rJava", "rms", "roxygen2", "rstudioapi", "sandwich", "scales", "scatterplot3d", "segmented", "sjmisc", "sjPlot", "sp", "SparseM", "StatMatch", "stringdist", "stringi", "subplex", "survey", "TH.data", "tidyr", "unmarked", "vegan", "VGAM", "withr", "XML", "yaml", "zoo"))
install.packages(c("abind", "acepack", "ade4", "AICcmodavg", "animation", "ape", "assertthat", "BH", "car", "chron", "clue", "coda", "coin", "colorspace", "corpcor", "crayon", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "doParallel", "dplyr", "effects", "EnvStats", "expm", "fastICA", "fastmatch", "fitdistrplus", "formatR", "Formula", "gdata", "geomorph", "ggplot2", "git2r", "gridExtra", "gtools", "haven", "highr", "Hmisc", "htmltools", "htmlwidgets", "httr", "igraph", "installr", "irlba", "jsonlite", "lazyeval", "lme4", "maps", "markdown", "memoise", "mgcv", "mime", "mnormt", "msm", "multcomp", "MuMIn", "mvtnorm", "numDeriv", "openssl", "ouch", "OUwie", "pander", "pbkrtest", "permute", "phangorn", "phytools", "plotrix", "plyr", "proto", "proxy", "psych", "quantreg", "R.matlab", "R.oo", "R.utils", "R6", "RANN", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rJava", "rms", "roxygen2", "rstudioapi", "sandwich", "scales", "scatterplot3d", "segmented", "sjmisc", "sjPlot", "sp", "SparseM", "StatMatch", "stringdist", "stringi", "subplex", "survey", "TH.data", "tidyr", "unmarked", "vegan", "VGAM", "withr", "XML", "yaml", "zoo"))
install.packages(c("abind", "acepack", "ade4", "AICcmodavg", "animation", "ape", "assertthat", "BH", "car", "chron", "clue", "coda", "coin", "colorspace", "corpcor", "crayon", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "doParallel", "dplyr", "effects", "EnvStats", "expm", "fastICA", "fastmatch", "fitdistrplus", "formatR", "Formula", "gdata", "geomorph", "ggplot2", "git2r", "gridExtra", "gtools", "haven", "highr", "Hmisc", "htmltools", "htmlwidgets", "httr", "igraph", "installr", "irlba", "jsonlite", "lazyeval", "lme4", "maps", "markdown", "memoise", "mgcv", "mime", "mnormt", "msm", "multcomp", "MuMIn", "mvtnorm", "numDeriv", "openssl", "ouch", "OUwie", "pander", "pbkrtest", "permute", "phangorn", "phytools", "plotrix", "plyr", "proto", "proxy", "psych", "quantreg", "R.matlab", "R.oo", "R.utils", "R6", "RANN", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rJava", "rms", "roxygen2", "rstudioapi", "sandwich", "scales", "scatterplot3d", "segmented", "sjmisc", "sjPlot", "sp", "SparseM", "StatMatch", "stringdist", "stringi", "subplex", "survey", "TH.data", "tidyr", "unmarked", "vegan", "VGAM", "withr", "XML", "yaml", "zoo"))
install.packages(c("abind", "acepack", "ade4", "AICcmodavg", "animation", "ape", "assertthat", "BH", "car", "chron", "clue", "coda", "coin", "colorspace", "corpcor", "crayon", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "doParallel", "dplyr", "effects", "EnvStats", "expm", "fastICA", "fastmatch", "fitdistrplus", "formatR", "Formula", "gdata", "geomorph", "ggplot2", "git2r", "gridExtra", "gtools", "haven", "highr", "Hmisc", "htmltools", "htmlwidgets", "httr", "igraph", "installr", "irlba", "jsonlite", "lazyeval", "lme4", "maps", "markdown", "memoise", "mgcv", "mime", "mnormt", "msm", "multcomp", "MuMIn", "mvtnorm", "numDeriv", "openssl", "ouch", "OUwie", "pander", "pbkrtest", "permute", "phangorn", "phytools", "plotrix", "plyr", "proto", "proxy", "psych", "quantreg", "R.matlab", "R.oo", "R.utils", "R6", "RANN", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rJava", "rms", "roxygen2", "rstudioapi", "sandwich", "scales", "scatterplot3d", "segmented", "sjmisc", "sjPlot", "sp", "SparseM", "StatMatch", "stringdist", "stringi", "subplex", "survey", "TH.data", "tidyr", "unmarked", "vegan", "VGAM", "withr", "XML", "yaml", "zoo"))
install.packages(c("abind", "acepack", "ade4", "AICcmodavg", "animation", "ape", "assertthat", "BH", "car", "chron", "clue", "coda", "coin", "colorspace", "corpcor", "crayon", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "doParallel", "dplyr", "effects", "EnvStats", "expm", "fastICA", "fastmatch", "fitdistrplus", "formatR", "Formula", "gdata", "geomorph", "ggplot2", "git2r", "gridExtra", "gtools", "haven", "highr", "Hmisc", "htmltools", "htmlwidgets", "httr", "igraph", "installr", "irlba", "jsonlite", "lazyeval", "lme4", "maps", "markdown", "memoise", "mgcv", "mime", "mnormt", "msm", "multcomp", "MuMIn", "mvtnorm", "numDeriv", "openssl", "ouch", "OUwie", "pander", "pbkrtest", "permute", "phangorn", "phytools", "plotrix", "plyr", "proto", "proxy", "psych", "quantreg", "R.matlab", "R.oo", "R.utils", "R6", "RANN", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "reshape2", "rgl", "rJava", "rms", "roxygen2", "rstudioapi", "sandwich", "scales", "scatterplot3d", "segmented", "sjmisc", "sjPlot", "sp", "SparseM", "StatMatch", "stringdist", "stringi", "subplex", "survey", "TH.data", "tidyr", "unmarked", "vegan", "VGAM", "withr", "XML", "yaml", "zoo"))
require(regions)
library(regions)
data("alligator")
dim(alligator)
data("mus")
dim(mus)
mus
alligator2 <- read.csv("C:/Users/Katrina/Google Drive/DOCUMENTS/Katrinas Folder/PROJECTS/SYNAPSID PROJECT/REGIONALIZATION ANALYSIS/FINAL REGIONALIZATION ANALYSES/FINAL REGIONALIZATION DATA/Alligator missippiensisMCZ81457.csv")
View(alligator2)
mus2 <- read.csv("C:/Users/Katrina/Google Drive/DOCUMENTS/Katrinas Folder/PROJECTS/SYNAPSID PROJECT/REGIONALIZATION ANALYSIS/FINAL REGIONALIZATION ANALYSES/FINAL REGIONALIZATION DATA/Mus musculus 59559.csv")
View(mus2)
devtools::use_data(alligator2,alligator)
data("alligator2")
alligator <- read.csv("C:/Users/Katrina/Google Drive/DOCUMENTS/Katrinas Folder/PROJECTS/SYNAPSID PROJECT/REGIONALIZATION ANALYSIS/FINAL REGIONALIZATION ANALYSES/FINAL REGIONALIZATION DATA/Alligator missippiensisMCZ81457.csv")
View(alligator)
mus <- read.csv("C:/Users/Katrina/Google Drive/DOCUMENTS/Katrinas Folder/PROJECTS/SYNAPSID PROJECT/REGIONALIZATION ANALYSIS/FINAL REGIONALIZATION ANALYSES/FINAL REGIONALIZATION DATA/Mus musculus 59559.csv")
View(mus)
devtools::use_data(alligator)
devtools::use_data(mus)
data("mius")
data("mus")
dim(mis)
dim(mus)
mus
mus <- read.csv("C:/Users/Katrina/Google Drive/DOCUMENTS/Katrinas Folder/PROJECTS/SYNAPSID PROJECT/REGIONALIZATION ANALYSIS/FINAL REGIONALIZATION ANALYSES/FINAL REGIONALIZATION DATA/Mus musculus 59559.csv")
View(mus)
data("mus")<-mus
devtools::use_data(mus)
devtools::use_data(mus, overwrite=T)
data("mus")
mus
mus_new <- read.csv("C:/Users/Katrina/Google Drive/DOCUMENTS/Katrinas Folder/PROJECTS/SYNAPSID PROJECT/REGIONALIZATION ANALYSIS/FINAL REGIONALIZATION ANALYSES/FINAL REGIONALIZATION DATA/Mus musculus 59559.csv")
View(mus_new)
devtools::use_data(mus_new)
data("mus_new")
data("mus_new")
data("mus")
mus
mus<-mus_new
devtools::use_data(mus, overwrite = TRUE)
data("mus")
mus
musm<-mus_new
devtools::use_data(musm)
alligatorm <- read.csv("C:/Users/Katrina/Google Drive/DOCUMENTS/Katrinas Folder/PROJECTS/SYNAPSID PROJECT/REGIONALIZATION ANALYSIS/FINAL REGIONALIZATION ANALYSES/FINAL REGIONALIZATION DATA/Alligator missippiensisMCZ81457.csv")
View(alligatorm)
devtools::load_all(".")
data("musm")
musm
data("alligator")
alligator
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
class(plot.pco.reg())
class(plot.pco.reg
)
class(compileregions)
library(regions)
install_github("katrinajones/Regions")
devtools::install_github("katrinajones/Regions")
library(regions)
data("alligator")
Xvar<-alligator[,1]
nvert<-length(Xvar)
Xvar[1:5]
data<-alligator[,2:ncol(alligator)] #rest are dependent variables
data<-Missingval(data)#fill missing data
data<-scale(data)
pco.gower<-svdPCO(data, "gower")#PCO using svd
PCOscores<-pco.gower$scores[,1:ncol(pco.gower$scores)]
noregions<-5 #Set the maximum number of regions which will be calculated
regiondata<-compileregions(Xvar,PCOscores[,1:10],noregions)
pander::pandoc.table(regiondata[1:5,1:10])
head$regiondata
head(regiondata)
regiondata$regions
subdata<-regiondata[which(regiondata[,1]==noregions),]
head(subdata)
pco.begin<-which(colnames(subdata)=="var.1"|colnames(subdata)=="var 1")#find the RSS values
sumRSS <- rowSums(subdata[,pco.begin:(pco.begin+(nopcos-1))]) #calculate total RSS
nopcos=5
sumRSS <- rowSums(subdata[,pco.begin:(pco.begin+(nopcos-1))]) #calculate total RSS
subdata<-cbind(subdata, sumRSS)
subdata<-as.data.frame(subdata)
head(subdata)
#How much worse than best model
RSSmin<-min(subdata$sumRSS)#RSS of best model
deltaRSS<-sapply(subdata$sumRSS, function(x) x-RSSmin)#Calculate RSS difference
deltaRSS
subdata<-cbind(subdata, deltaRSS)
head(subdata)
##Sum deltaRSS for each position
minv<-min(subdata[,2:pcobegin])
##Sum deltaRSS for each position
minv<-min(subdata[,2:pco.begin])
minv
subdata[,2:pco.begin]==0
##Sum deltaRSS for each position
subdata[,2:pco.begin]==0<-NA
##Sum deltaRSS for each position
which(subdata[,2:pco.begin]==0)<-NA
subdata[,2:pco.begin][0]
##Sum deltaRSS for each position
subdata[,2:pco.begin][subdata[,2:pco.begin]==0]<-NA
head(subdata)
minv<-min(subdata[,2:pco.begin])
minv
maxv<-max(subdata[,2:pco.begin])
maxv
minv<-min(subdata$breakpoint1)
minv
maxv<-max(subdata[,(pco.begin-1)])
maxv
range(Xvar)
##Sum deltaRSS for each position
mods<-subdata[,2:pco.begin]
##Sum deltaRSS for each position
mods<-subdata[,2:pco.begin]
i=1
vert<-Xvar[i]
which(mods==vert, arr.ind = T)
vert
head(mods)
##Sum deltaRSS for each position
mods<-subdata[,2:(pco.begin-1)]
which(mods==vert, arr.ind = T)
which(as.matrix(mods)==vert, arr.ind = T)
vert
i=2
vert<-Xvar[i]
vert
which(mods==vert, arr.ind = T)
dim(rowvert)
rowvert<-which(mods==vert, arr.ind = T)
dim(rowvert)
rowvert<-c(rowvert[,1])
rowvert
vertscore<-sum(subdata$deltaRSS[rowvert])
vertscore
positions<-data.frame(data=NA, nrow=length(Xvar), ncol=2)
#Calculate RSS
subdata<-regiondata[which(regiondata[,1]==noregions),]#select models with correct no of regions
pco.begin<-which(colnames(subdata)=="var.1"|colnames(subdata)=="var 1")#find the RSS values
sumRSS <- rowSums(subdata[,pco.begin:(pco.begin+(nopcos-1))]) #calculate total RSS
subdata<-cbind(subdata, sumRSS)
subdata<-as.data.frame(subdata)
#How much worse than best model
RSSmin<-min(subdata$sumRSS)#RSS of best model
deltaRSS<-sapply(subdata$sumRSS, function(x) x-RSSmin)#Calculate RSS difference
subdata<-cbind(subdata, deltaRSS)
##Sum deltaRSS for each position
mods<-subdata[,2:(pco.begin-1)]
positions<-data.frame(data=NA, nrow=length(Xvar), ncol=2)
for(i in 2:(length(Xvar)-1)){
vert<-Xvar[i]
rowvert<-which(mods==vert, arr.ind = T)
rowvert<-c(rowvert[,1])
vertscore<-sum(subdata$deltaRSS[rowvert])
positions[i,1]<-vert
positions[i,2]<-vertscore
}
positions
positions<-data.frame(data=NA, nrow=length(Xvar)-2, ncol=2)
for(i in 2:(length(Xvar)-1)){
vert<-Xvar[i]
rowvert<-which(mods==vert, arr.ind = T)
rowvert<-c(rowvert[,1])
vertscore<-sum(subdata$deltaRSS[rowvert])
positions[i,1]<-vert
positions[i,2]<-vertscore
}
positions
Xvar
positions<-data.frame(data=NA, nrow=length(Xvar)-2, ncol=2)
positions
positions<-data.frame(data=NA, nrow=(length(Xvar)-2), ncol=2)
positions
positions<-matrix(data=NA, nrow=(length(Xvar)-2), ncol=2)
positions
for(i in 2:(length(Xvar)-1)){
vert<-Xvar[i]
rowvert<-which(mods==vert, arr.ind = T)
rowvert<-c(rowvert[,1])
vertscore<-sum(subdata$deltaRSS[rowvert])
positions[i,1]<-vert
positions[i,2]<-vertscore
}
positions
positions<-matrix(data=NA, nrow=(length(Xvar)-2), ncol=2)
for(i in 2:(length(Xvar)-1)){
vert<-Xvar[i]
rowvert<-which(mods==vert, arr.ind = T)
rowvert<-c(rowvert[,1])
vertscore<-sum(subdata$deltaRSS[rowvert])
positions[i-1,1]<-vert
positions[i-1,2]<-vertscore
}
positions
i=20
vert<-Xvar[i]
vert
rowvert<-which(mods==vert, arr.ind = T)
rowvert
vertscore<-sum(subdata$deltaRSS[rowvert])
vertscore
Xvar
length(Xvar)
i=21
vert<-Xvar[i]
rowvert<-which(mods==vert, arr.ind = T)
rowvert
positions<-matrix(data=NA, nrow=(length(Xvar)-3), ncol=2)
for(i in 2:(length(Xvar)-2)){
vert<-Xvar[i]
rowvert<-which(mods==vert, arr.ind = T)
rowvert<-c(rowvert[,1])
vertscore<-sum(subdata$deltaRSS[rowvert])
positions[i-1,1]<-vert
positions[i-1,2]<-vertscore
}
positions
devtools::load_all(".")
regionheat(regiondata,4,3,Xvar)
test<-regionheat(regiondata,4,3,Xvar)
plot(test)
